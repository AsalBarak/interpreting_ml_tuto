.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_content_02_why_02_interpreting_random_forests.py>` to download the full example code or run this example in your browser via Binder
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_content_02_why_02_interpreting_random_forests.py:


Interpreting random forests
============================

Interpreting random forests


Data on wages
--------------



.. code-block:: python

    import urllib
    import os
    import pandas

    if not os.path.exists('wages.txt'):
        # Download the file if it is not present
        urllib.urlretrieve('http://lib.stat.cmu.edu/datasets/CPS_85_Wages',
                           'wages.txt')

    # Give names to the columns
    names = [
        'EDUCATION: Number of years of education',
        'SOUTH: 1=Person lives in South, 0=Person lives elsewhere',
        'SEX: 1=Female, 0=Male',
        'EXPERIENCE: Number of years of work experience',
        'UNION: 1=Union member, 0=Not union member',
        'WAGE: Wage (dollars per hour)',
        'AGE: years',
        'RACE: 1=Other, 2=Hispanic, 3=White',
        'OCCUPATION: 1=Management, 2=Sales, 3=Clerical, 4=Service, 5=Professional, 6=Other',
        'SECTOR: 0=Other, 1=Manufacturing, 2=Construction',
        'MARR: 0=Unmarried,  1=Married',
    ]

    short_names = [n.split(':')[0] for n in names]

    data = pandas.read_csv('wages.txt', skiprows=27, skipfooter=6, sep=None,
                           header=None)
    data.columns = short_names

    # Log-transform the wages, as they typically increase with
    # multiplicative factors
    import numpy as np
    data['WAGE'] = np.log10(data['WAGE'])


    features = [c for c in data.columns if c != 'WAGE']
    X = data[features]
    y = data['WAGE']







Feature importance
----------------------



.. code-block:: python


    from sklearn import ensemble

    forest = ensemble.RandomForestRegressor()
    forest.fit(X, y)

    # Visualize the feature importance
    importance = forest.feature_importances_
    from matplotlib import pyplot as plt
    plt.barh(np.arange(importance.size), importance)
    plt.yticks(np.arange(importance.size), features)
    plt.tight_layout()




.. image:: /content/02_why/images/sphx_glr_02_interpreting_random_forests_001.png
    :class: sphx-glr-single-img




Meaning and Caveats
-----------------------

Feature importances are a proxy for the mutual information between the
feature and the target, conditionally on the other features. The
conditioning is difficult and not well controlled.

Higher-cardinality categorical variables will have larger
feature importances

________________________________________________________


**Total running time of the script:** ( 0 minutes  0.120 seconds)


.. _sphx_glr_download_content_02_why_02_interpreting_random_forests.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: https://static.mybinder.org/badge.svg
      :target: https://mybinder.org/v2/gh/gaelvaroquaux/interpreting_ml_tuto/master?filepath=_downloads/02_interpreting_random_forests.ipynb
      :width: 150 px


  .. container:: sphx-glr-download

     :download:`Download Python source code: 02_interpreting_random_forests.py <02_interpreting_random_forests.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: 02_interpreting_random_forests.ipynb <02_interpreting_random_forests.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
