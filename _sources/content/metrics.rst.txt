

.. _sphx_glr_content_metrics.py:


Metrics to judge the sucess of a model
=======================================

Pro & cons of various performance metrics.

.. contents::

The simple way to use a scoring metric during cross-validation is
via the `scoring` parameter of
:func:`sklearn.model_selection.cross_val_score`.


Regression settings
-----------------------

The Boston housing data
........................



.. code-block:: python


    from sklearn import datasets
    boston = datasets.load_boston()

    # Shuffle the data
    from sklearn.utils import shuffle
    data, target = shuffle(boston.data, boston.target, random_state=0)







A quick plot of how each feature is related to the target



.. code-block:: python

    from matplotlib import pyplot as plt

    for feature, name in zip(data.T, boston.feature_names):
        plt.figure(figsize=(4, 3))
        plt.scatter(feature, target)
        plt.xlabel(name, size=22)
        plt.ylabel('Price (US$)', size=22)
        plt.tight_layout()




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /content/images/sphx_glr_metrics_001.png
            :scale: 47

    *

      .. image:: /content/images/sphx_glr_metrics_002.png
            :scale: 47

    *

      .. image:: /content/images/sphx_glr_metrics_003.png
            :scale: 47

    *

      .. image:: /content/images/sphx_glr_metrics_004.png
            :scale: 47

    *

      .. image:: /content/images/sphx_glr_metrics_005.png
            :scale: 47

    *

      .. image:: /content/images/sphx_glr_metrics_006.png
            :scale: 47

    *

      .. image:: /content/images/sphx_glr_metrics_007.png
            :scale: 47

    *

      .. image:: /content/images/sphx_glr_metrics_008.png
            :scale: 47

    *

      .. image:: /content/images/sphx_glr_metrics_009.png
            :scale: 47

    *

      .. image:: /content/images/sphx_glr_metrics_010.png
            :scale: 47

    *

      .. image:: /content/images/sphx_glr_metrics_011.png
            :scale: 47

    *

      .. image:: /content/images/sphx_glr_metrics_012.png
            :scale: 47

    *

      .. image:: /content/images/sphx_glr_metrics_013.png
            :scale: 47




We will be using a random forest regressor to predict the price



.. code-block:: python

    from sklearn.ensemble import RandomForestRegressor
    regressor = RandomForestRegressor()







Explained variance vs Mean Square Error
.......................................

The default score is explained variance



.. code-block:: python

    from sklearn.model_selection import cross_val_score
    print(cross_val_score(regressor, data, target))





.. rst-class:: sphx-glr-script-out

 Out::

    [ 0.80283841  0.8367954   0.83993873]


Explained variance is convienent because it has a natural scaling: 1 is
perfect prediction, and 0 is around chance

Now let us see which houses are easier to predict:

Not along the Charles river (feature 3)



.. code-block:: python

    print(cross_val_score(regressor, data[data[:, 3] == 0],
                          target[data[:, 3] == 0]))





.. rst-class:: sphx-glr-script-out

 Out::

    [ 0.80602689  0.89345599  0.8376363 ]


Along the Charles river



.. code-block:: python

    print(cross_val_score(regressor, data[data[:, 3] == 1],
                          target[data[:, 3] == 1]))





.. rst-class:: sphx-glr-script-out

 Out::

    [ 0.5641373  -0.22390645  0.76227924]


So the houses along the Charles are harder to predict?

It's not so easy to conclude this from the explained variance: in two
different sets of observations, the variance of the target differs, and
the explained variance is a relative measure

**MSE**: We can use the mean squared error (here negated)

Not along the Charles river



.. code-block:: python

    print(cross_val_score(regressor, data[data[:, 3] == 0],
                          target[data[:, 3] == 0],
                          scoring='neg_mean_squared_error'))





.. rst-class:: sphx-glr-script-out

 Out::

    [-11.74966879  -9.0364293  -14.75852611]


Along the Charles river



.. code-block:: python

    print(cross_val_score(regressor, data[data[:, 3] == 1],
                          target[data[:, 3] == 1],
                          scoring='neg_mean_squared_error'))





.. rst-class:: sphx-glr-script-out

 Out::

    [-77.14865833 -52.42084167 -20.44624545]


So the error is larger along the Charles river


Mean Squared Error versus Mean Absolute Error
..................................................

What if we want to report an error in dollars, meaningful for an
application?

The Mean Absolute Error is useful for this goal



.. code-block:: python

    print(cross_val_score(regressor, data, target,
                          scoring='neg_mean_absolute_error'))





.. rst-class:: sphx-glr-script-out

 Out::

    [-2.6052071  -2.29236686 -2.66791667]


Summary
.........

* **explained variance**: scaled with regards to chance: 1 = perfect,
  0 = around chance, but it shouldn't used to compare predictions
  across datasets

* **mean absolute error**: enables comparison across datasets in the
  units of the target


Classification settings
-----------------------

The digits data
.................



.. code-block:: python

    digits = datasets.load_digits()
    # Let us try to detect sevens:
    sevens = (digits.target == 7)

    from sklearn.ensemble import RandomForestClassifier
    classifier = RandomForestClassifier()







Accuracy and its shortcomings
.............................

The default metric is the accuracy: the averaged fraction of success.
It takes values between 0 and 1, where 1 is perfect prediction



.. code-block:: python

    print(cross_val_score(classifier, digits.data, sevens))





.. rst-class:: sphx-glr-script-out

 Out::

    [ 0.96666667  0.95826377  0.98829431]


However, a stupid classifier can each good prediction wit imbalanced
classes



.. code-block:: python

    from sklearn.dummy import DummyClassifier
    dummy = DummyClassifier(strategy='most_frequent')
    print(cross_val_score(dummy, digits.data, sevens))





.. rst-class:: sphx-glr-script-out

 Out::

    [ 0.9         0.89983306  0.90133779]


Balanced accuracy (available in development scikit-learn versions)
fixes this, but can have surprising behaviors, such as being negative


Precision, recall, and their shortcomings
..........................................

We can measure separately false detection and misses

**Precision**: Precision counts the ratio of detections that are
correct



.. code-block:: python

    print(cross_val_score(classifier, digits.data, sevens,
                          scoring='precision'))




.. rst-class:: sphx-glr-script-out

 Out::

    [ 1.          1.          0.98076923]


Our classifier has a good precision: most of the sevens that it
predicts are really sevens.

As predicting the most frequent never predicts sevens, precision is ill
defined. Scikit-learn puts it to zero



.. code-block:: python

    print(cross_val_score(dummy, digits.data, sevens, scoring='precision'))






.. rst-class:: sphx-glr-script-out

 Out::

    [ 0.  0.  0.]


**Recall**: Recall counts the fraction of class 1 actually detected



.. code-block:: python

    print(cross_val_score(classifier, digits.data, sevens, scoring='recall'))





.. rst-class:: sphx-glr-script-out

 Out::

    [ 0.7         0.76666667  0.86440678]


Our recall isn't as good: we miss many sevens

But predicting the most frequent never predicts sevens:



.. code-block:: python

    print(cross_val_score(dummy, digits.data, sevens, scoring='recall'))





.. rst-class:: sphx-glr-script-out

 Out::

    [ 0.  0.  0.]


**Note**: Measuring only the precision without the recall makes no
sense, it is easy to maximize one at the cost of the other. Ideally,
classifiers should be compared on a precision at a given recall


Area under the ROC curve
..........................

If the classifier provides a decision function that can be thresholded
to control false positives versus false negatives, the ROC curve
summarise the different tradeoffs that can be achieved by varying this
threshold.

Its Area Under the Curve (AUC) is a useful metric where 1 is perfect
prediction and .5 is chance, independently of class imbalance



.. code-block:: python

    print(cross_val_score(classifier, digits.data, sevens, scoring='roc_auc'))





.. rst-class:: sphx-glr-script-out

 Out::

    [ 0.98757716  0.9894094   0.99863212]



.. code-block:: python

    print(cross_val_score(dummy, digits.data, sevens, scoring='roc_auc'))






.. rst-class:: sphx-glr-script-out

 Out::

    [ 0.5  0.5  0.5]


Average precision
..................


Multiclass and multilabel settings
...................................


**Total running time of the script:** ( 0 minutes  2.144 seconds)



.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: metrics.py <metrics.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: metrics.ipynb <metrics.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
